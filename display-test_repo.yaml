esphome:
  name: display-test-controller
  friendly_name: display_test

esp32:
  board: esp32-c6-devkitm-1
  variant: esp32c6
  framework:
    type: esp-idf

external_components:
  - source: 
      type: git
      url: https://github.com/obucklin/GDEP073E01_DisplayComponent
    components: all

logger:
  level: VERBOSE
debug:

text_sensor:
  - platform: debug
    device:
      name: "Device Info"
    reset_reason:
      name: "Reset Reason"

sensor:
  - platform: debug
    free:
      name: "Heap Free"
    block:
      name: "Heap Max Block"
    loop_time:
      name: "Loop Time"
    psram:
      name: "Free PSRAM"

psram:
  enabled: true

spi:
  clk_pin: GPIO7
  mosi_pin: GPIO21  # MOSI is required
  
spi_device:
  - bit_order: msb_first
    data_rate: 10MHz
    spi_mode: 0

# font:
#   # - file: "gfonts://Roboto"
#   #   id: roboto_10
#   #   size: 30
#   # - file: "gfonts://Orbitron"
#   #   id: Orbitron_30
#   #   size: 40
#   # - file: "gfonts://Orbitron"
#   #   id: Orbitron_15
#   #   size: 15
#   # - file: "gfonts://Orbitron"
#   #   id: Orbitron_BIG
#   #   size: 100
#   - file: "gfonts://Audiowide"
#     id: Audiowide_BIG
#     size: 100
#   - file: "gfonts://Audiowide"
#     id: Audiowide_small
#     size: 25
#   - file: "gfonts://Audiowide"
#     id: Audiowide_med
#     size: 45

display:
  - platform: waveshare_epaper
    model: gdep073e01
    cs_pin: GPIO5
    dc_pin: GPIO4
    reset_pin: GPIO3
    busy_pin: GPIO6  # Input pin
    update_interval: 1800s
    rotation: 270
    lambda: |-
      auto black = Color(0x00, 0x00, 0x00);
      auto red = Color(0xFF, 0x00, 0x00);
      auto green = Color(0x00, 0xFF, 0x00);
      auto blue = Color(0x00, 0x00, 0xFF);
      auto white = Color(0xFF, 0xFF, 0xFF);
      auto yellow = Color(0xFF, 0xFF, 0x00);

      it.fill(green);
      // it.filled_rectangle(it.get_width()/2+6, 3, it.get_width()-3, 200 , white);
      // it.printf(it.get_width()/2+34, 8, id(Audiowide_med), black, "LIMMAT");  
      // it.printf(it.get_width()/2+20, 60, id(Audiowide_BIG),black, "%.1fÂ°", id(limmat_temperature).state);  
      

      it.filled_rectangle(3, 3, it.get_width()/2-6, it.get_height()-6, white);
      for (int i = 0; i < 14; i++) {
        int line_pos = (i * (it.get_height()-6) / 13)+3; 
        it.line(3, line_pos+1, it.get_width()/2-6, line_pos+1, green);
        // if (i%2)
          // it.printf(5, line_pos+2, id(Audiowide_small),black, "%d", i+7);      
        }


# i2c:
#   sda: GPIO8
#   scl: GPIO20
#   scan: true
#   frequency: 50khz
  

# sensor:
  # - platform: sht3xd
  #   temperature:
  #     name: "Living Room Temperature"
  #   humidity:
  #     name: "Living Room Humidity"
  #   address: 0x44
  #   update_interval: 10s
  # - platform: homeassistant
  #   entity_id: sensor.limmat_temperature
  #   id: limmat_temperature

captive_portal:    
    